#! /usr/bin/perl

=for tac cpu
  tac - the three address code machine simulatur/interpreter

  implements a virtual cpu with the following commands, involving up 
  to three memory locations.
 
  The cpu consequently has not registers and the program counter is not
  user visible. Operations set conditions flags (zero, negative, carry)
 
  Syntax:
  - normal arg is direct (dir) address, mem[arg]
  - leading asterisk (*) denotes indirection (ind), mem[mem[arg]]
  - leading hash (#) denotes immediate value (imm), arg
 
  Address-Abbreviations:
    <imm-or-addr> : either #<imm> or <addr> or *<addr>
    <dir-or-ind>  : either <addr> or *<addr>

  Move first argument to second
    mov <imm-or-addr> <dir-or-ind> 
  Dyadic arithmetic/logic (add, sub, mul, div, and, ior, xor)
    add <imm-or-addr> <imm-or-addr> <dir-or-addr>
  Monadic arithmetic/logic (com[plement], not)
    com <imm-or-addr> <dir-or-addr>
  Bit shifting (of: logical or arithmentc, shift or rotate, left or right, 
  with or without carry)
  Implemented: logical shift/rotate left/right with carry
  Commands: shl/shr/rol/ror
    shl <imm-or-addr> <dir-or-addr>
  Compare (like sub but only sets flag)
    cmp <imm-or-addr> <imm-or-addr>
  Branching (jmp, jeq (equal, i.e. cmp yields zero), jne (not equal), 
    jle (less, i.e. cmp yields negative), jgt (greater), 
    jcs (carry set), jcc (carry clear) 
    jmp <addr>, jsr  <addr> (move retvec <addr>, jmp <addr+1>)
  Miscelaeneous: Clear carry flag, no-operation, halt
    clc
    nop
    hlt
 
=cut

use strict;

use Data::Dumper;
use Term::ReadLine;
use Getopt::Long;
use File::Slurp;
use Text::Tabs;

# cmdline options
my $bits = 10; # default: 10 bits, 1024 memory cells, max unsigned is 1023
my $fmt = 'd'; # number output defaults to decimal
my ($srcfile, $datafile, $helpme, $dumps, $punch, $trace, $quiet, $inter);

GetOptions(
    "help|?" => \$helpme,
    "read=s" => \$datafile,
    "dump=s" => \$dumps,
    "punch=s" => \$punch,
    "trace" => \$trace,
    "quiet" => \$quiet,
    "bits=i" => \$bits,
    "format=s" => \$fmt,
    "interactive" => \$inter,
    ) or die("Fatal error: Cannot understand options\n");

my ($srcfile, $endguard) = @ARGV;
die qq/Usage: tacsim [ options ] srcfile
    -h             - this help
    -r <file\@addr> - read whitespace delimited numbers from file to addr
    -d <n>         - dump ten memloc starting at <n> after run
    -p <addr, ...> - print mem loc list (addrs, symbols and arrays) after run
    -t             - trace mode on
    -q             - quiet mode
    -b <n>         - set word width to <n> bits (default 10)
    -f [dxo]       - set number output format to dec, oct, hex
    -i             - enter interacive monitor after startup
/
    if(!defined $srcfile || defined $endguard || defined $helpme);

die "TACSIM: Fatal: Bad output format specifier: $fmt.\n" if("dxo" !~ /$fmt/);
# machine size
my $maxcells = 1 << $bits; 
my $maxlines = $maxcells;

# formating
my $numlen = length(sprintf "%$fmt", ($maxcells - 1));
my $npic = "%0${numlen}$fmt";
my $tpic = "%0${numlen}s";
my $spic = "%-${numlen}s";
my $tab  = "        ";
my $lab  = "%-8s";

# data mem and prog lines
my @mem = (); 
# $mem[$maxcells-1] = 0; # setup mem to be of size maxcells
my @lines = ();
my $lineno = 0;
my %brklst = ();
my $wchlst = "";
my $halted = 0;
my $running = 1;

# symbols
my $memptr = 0;
my %symtab = ();
my %revtab;
my %cond = ('Z' => 0, 'N' => 0, 'C' => 0);

sub taceval {
    my @words = split /\s+/, shift;
    my $wordno = 0;
    my $cmdproc = undef;
    my @arglist = ();
    my @val;
    # print "WORDS: " . join(',', @words) . "\n";
    WORD: foreach my $word (@words) {
	$wordno++;
	last WORD if $word =~ /^;/; # discard word after comment sign ';'
	if(($wordno == 1) && ($word =~ /^[[:alpha:]][[:alnum:]]*[:=]$/)) {
	    # a word in first position starting with a alpha char is a label
	    # or a memory assignment already processed in first pass
	} else {
	    # cmd or arg
	    # print "WORK: $word\n";
	    my $subname = "tac_" . lc $word;
	    if(my $proc = __PACKAGE__->can($subname)) {
		$cmdproc = $proc;
		# valid command
	    } else {
		# its an arg
		# print "ARG $word\n";
		if($word =~ /^([#*\@]?)(\S+)$/) {
		    @val = [$2, $1]; # value, mode
		} else {
		    # empty word
		}
		push @arglist, @val;
	    }
	}
    }

    my $nxtloc = $memptr + 1;
    if(defined $cmdproc) {
	# call cmd proc
	my $retloc = $cmdproc->(@arglist);
	$nxtloc = $retloc if $retloc;
    } elsif (my $nargs = @arglist) {
	# no cmd, but args -> err
	print "Error: Invalid command in line $lineno.\n";
    } else {
	# no command in line, just comment
    }
    $memptr = $nxtloc if($nxtloc > 0);
}

sub tacargs {
    my @fixed = ();
    my $trace = "";
    my $dirind = shift;
    my $argcnt = scalar @{$dirind};
    if($argcnt != scalar(@_)) {
	print "Error: Expected $argcnt operands in line $lineno.\n";
    } else {
	foreach my $arg (@_) {
	    my $dir = shift $dirind;
	    my ($val, $mode) = @{ $arg };
	    # print "TACARG: $val, $mode, $dir\n";
	    $trace .= " $mode$val";
	    if($val =~ /^(\D\S*)/) {
		# does not start with a digit -> label
		($val, undef) = @{$symtab{uc $val}};
		$trace .= "($val)";
		if(!$val) {
		    print STDERR "Warning: Undefined symbol $1 in line $lineno\n";
		}
	    }
	    # print "SYMREF: $val, $mode, $dir\n";
	    if($mode eq '*') {
		# val is addr
		$val = $mem[$val];		
		$trace .= "->" . (exists $revtab{$val} ? $revtab{$val} : "$val");
	    } 
	    if($mode ne '#' && $dir eq 'R') {
		# reading,  direct and indirect
		$val = $mem[$val];
		$trace .= "=$val";
	    }
	    push @fixed, 0+$val;
	}
    }
    #print "FIX: " . Dumper(@fixed);
    return (@fixed, $trace);
}

sub taccond {
    my $val = shift;
    #print "COND: $val " . ($maxcells >> 1);
    $cond{'Z'} = ($val == 0) ? 1 : 0;
    $cond{'N'} = ($val > ($maxcells >> 1)) ? 1 : 0;
    #print " N: " . $cond{'N'} . "\n";
}

sub tacscale {
    my ($val, $mode) = @_;
    my $res = $val % $maxcells;
    taccond($res) unless($mode =~ /nocond/);
    if($val != $res && $mode !~ /nowarn/) {
	print "Warning: Value $val scaled to $res in line $lineno\n";
    }
    return $res;
}

sub tac_mem {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    prtrace("MEM[$memptr]", $argtrace) if $trace;
    $mem[$memptr++] = tacscale($args[0]);
    return 0;
}

sub tac_mov {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    $mem[$args[1]] = my $res = tacscale($args[0]);
    prtrace("MOV", $argtrace, $res) if $trace;
    return 0;
}

sub tac_add {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] + $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("ADD", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_sub {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] - $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("SUB", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_mul {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] * $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("MUL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_div {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = int ($args[0] / $args[1]);
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("DIV", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_com {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale((~$args[0])+1, 'nowarn');
    $mem[$args[1]] = $res;
    prtrace("COM", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_and {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] & $args[1]);
    $mem[$args[2]] = $res;
    prtrace("AND", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_ior {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] | $args[1]);
    $mem[$args[2]] = $res;
    prtrace("IOR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_xor {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] ^ $args[1]);
    $mem[$args[2]] = $res;
    prtrace("XOR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_not {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale(~$args[0], 'nowarn');
    $mem[$args[1]] = $res;
    prtrace("NOT", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_shl {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] << 1;
    $cond{'C'} = ($res & ($maxcells >> 1)) ? 1 : 0;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("SHL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_shr {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    $cond{'C'} = $args[0] & 1;
    my $res = $args[0] >> 1;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("SHR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_rol {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = ($args[0] << 1) | $cond{'C'};
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("ROL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_ror {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $carry = $args[0] & 1;
    my $res = (($args[0] >> 1) | ($cond{'C'} ? ($maxcells >> 1) : 0));
    $cond{'C'} = $carry;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("ROR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_cmp {
    my @args = tacargs(['R', 'R'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] - $args[1];
    #print "CMP Result: $res\n";
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $res = tacscale($res, 'nowarn');
    #print "CMP Result: $res\n";
    prtrace("CMP", $argtrace, undef, 'cond') if $trace;
    return 0;
}

sub tac_clc {
    my @args = tacargs([], @_);
    my $argtrace = pop @args;
    $cond{'C'} = 0;
    prtrace("CLC", $argtrace, undef, 'cond') if $trace;
    return 0;
}

sub tac_jmp {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0]);
    prtrace("JMP", $argtrace) if $trace;
    return $res;
}    

sub tac_jsr {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    $mem[$args[0]] = $memptr + 1;
    my $res = tacscale($args[0]+1);
    prtrace("JSR", $argtrace) if $trace;
    return $res;
}    

sub tac_jeq {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JEQ", $argtrace, 0, 'cond') if $trace;
    return $cond{'Z'} ? $res : 0;
}    

sub tac_jne {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JNE", $argtrace, 0, 'cond') if $trace;
    return $cond{'Z'} ? 0 : $res;
}    

sub tac_jle {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JLE", $argtrace) if $trace;
    return $cond{'N'} ? $res : 0;
}    

sub tac_jgt {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JGT", $argtrace) if $trace;
    return $cond{'N'} || $cond{'Z'} ? 0 : $res;
}    

sub tac_jcs {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JCS", $argtrace) if $trace;
    return $cond{'C'} ? $res : 0;
}    

sub tac_jcc {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JCC", $argtrace) if $trace;
    return $cond{'C'} ? 0 : $res;
}    

sub tac_nop {
    prtrace("NOP") if $trace;
    return 0;
}

sub tac_hlt {
    $halted = 1;
    prtrace("HLT") if $trace;
    print "TACSIM STOPPED. Machine halted.\n" if !$quiet;
    return -1;
}

sub prtrace {
    my ($cmd, $argtrace, $res, $condtrace) = @_;
    printf "TRACED> $tpic: $cmd " . $argtrace, $memptr;
    print "<=" . $res if defined $res;
    printf(" ;COND Z:%d N:%d C:%d",
	   $cond{'Z'}, $cond{'N'}, $cond{'C'}) if defined $condtrace;
    print "\n";
}

sub doline {
    my $line = $lines[$mem[$memptr]-1]; # lines start at 1
    if($line =~ /^.=\s+(\d+)/) {
	# mem ptr assignement, done in first pass
    } elsif($line =~/^#pragma/i) {
	# pragma, processed in first pass
    } else {
	taceval($line);
    }
    if($memptr > $maxcells) {
	print "TACSIM STOPPED. You fell off the cliff.\n" if !$quiet;
	return -1;
    }
    return 0;
}

sub docmd {
    my $cmdln = shift;
    $cmdln =~ s/^\s+|\s+$//g;
    if($cmdln =~ /^\s*$/) {
	doline() if !$halted;
	cmd_prline();
    } elsif($cmdln =~/^\.$/) {
	cmd_prline();
    } elsif($cmdln =~/^q$/) {
	$running = 0;
    } elsif($cmdln =~/^s$/) {
	foreach my $sym (sort keys %symtab) {
	    my ($addr, $name) = @{$symtab{$sym}};
	    printf "% 9s: $npic\n", $name, $addr;
	}
    } elsif($cmdln =~/^t$/) {
	if($trace) {
	    $trace = 0;
	    print "TACSIM: Trace off.\n";
	} else {
	    $trace = 1;
	    print "TACSIM: Trace on.\n";
	}
    } elsif($cmdln =~/^g(\s+(\S+))?$/) {
	cmd_go($2);
    } elsif($cmdln =~/^d\s+([^,\s]+)\s*(,\s*(\+?\S+))?$/) {
	cmd_dump($1, $3);
    } elsif($cmdln =~/^b\s+(\S+)$/) {
	cmd_break($1);
    } elsif($cmdln =~/^bc\s+(\S+)$/) {
	cmd_clrbrk($1);
    } elsif($cmdln =~/^bca$/) {
	cmd_clrall();
    } elsif($cmdln =~/^bl$/) {
	cmd_lstbrk($1);
    } elsif($cmdln =~/^l\s+([^,\s]+)\s*(,\s*(\+?\S+))?$/) {
	cmd_list($1, $3);
    } elsif($cmdln =~/^p\s+(\S+.*)$/) {
	cmd_punch($1);
    } elsif($cmdln =~/^w(\s+(\S+.*))?$/) {
	cmd_watch($2);
    } elsif($cmdln =~/^wc$/) {
	cmd_clrwat();
    } elsif($cmdln =~/^[\?h]$/) {
	my $th = qq/TACSIM interactive mode:
	(addr can be number or symbol, symbols may have an offset)
	<cr> \t\t- pressing return executes the next operation
	. \t\t- print the current operation (not yet executed)
	t \t\t- toggle trace mode on or off
	s \t\t- print symbol table
	b <a> \t\t- set breakpoint at addr <a>
	bl \t\t- list breakpoints
	bc <a> \t\t- clear breakpoint at addr <a>
	bca \t\t- clear all breakpoints
	l <a>[, <b>] \t- list source from addr <a> to <b>
	d <a>[, <b>] \t- dump memory cells from addr <a> to <b>
	p <a>[, <b> ..]\t- print items, may be addrs, symbols or arrays
	w <a>[, <b> ..]\t- watch items, like p, enter w ? for help
	w \t\t- print list of watched items (printed on each break)
	wc \t\t- cleat list of watched items
	g [<a>] \t- go from addr <a> or current addr\n/;
	$th =~ s/\n\t/\n/g;
	print $th;
    } else {
	print "TACSIM: Unknown command or missing arguments: $cmdln\n";
    }
}

sub symres {
    my @toks = @_;
    my @addrs = ();
    my $this;
    my $last = 0;
    foreach my $addr (@toks) {
	next if $addr =~ /^$/;
	if($addr =~ /^(\+?)(\d+)$/) {
	    if($1 eq '+') {
		$this = $last + $2;
	    } else {
		$this = $2;
	    }
	} else {
	    my $offs = 0;
	    if($addr =~ /^(\w+)([+-])(\d+)$/) {
		$addr = $1;
		$offs = ($2 eq '+') ? $3 : -$3;
	    }
	    if(exists $symtab{uc $addr}) {
		($this, undef) = @{$symtab{uc $addr}};
	    } else {
		print "Error: Cannot resolve symbol $addr.\n";
		return ();
	    }
	    $this += $offs;
	}
	$last = $this;
	push @addrs, $this;
    }
    return @addrs;
}

sub printline {
    my ($loc, $prompt) = @_;
    if($wchlst) {
	cmd_punch($wchlst);
    }
    $prompt = "NEXTOP> " if !defined $prompt;
    my $lno = $mem[$loc]-1;
    my $line = ($lno > 0) && exists $lines[$lno]
	? $lines[$lno] : "<no line here>";
    printf("$prompt$npic: %s\n", $loc, $line) if ($loc >= 0);
}

sub cmd_prline {
    printline($memptr);
}

sub cmd_list {
    my ($first, $last) = symres(@_);
    return if !defined $first;
    $last = $first + 10 if !defined $last;
    for(my $i = $first; $i <= $last; $i++) {
	printline($i, "PRGLST> ");
    }
}

sub symlist {
    my $locs = shift;
    my @loclst = split /,\s*/, $locs;
    my @locbas = ();
    my @cntlst = ();
    my @symlst = ();
    foreach my $loc (@loclst) {
	if($loc =~ /^(\w+)\[(.+)\]$/) {
	    push @locbas, $1;
	    push @cntlst, $2;
	} else {
	    push @locbas, $loc;
	    push @cntlst, 1;
	}
    }
    my @addrs = symres(@locbas);
    for(my $i; $i < scalar(@addrs); $i++) {
	push @symlst, {
	    addr  => $addrs[$i],
	    base  => $locbas[$i],
	    count => $cntlst[$i],
	    ref   => $loclst[$i],
	};
    }
    return @symlst;
}

sub showmem {
    my ($prompt, $first, $last) = @_;
    $prompt = expand($prompt);
    my $perln = int((79 - length($prompt)) / ($numlen+1)) - 1; # cells per line
    while($first <= $last) {
	printf("$prompt$npic: ", $first);
	for(my $i = 0; $i < $perln; $i++) {
	    if($first <= $last) {
		printf("$npic ", $mem[$first]);
		$first++;
	    }
	}
	print "\n";
    }
}

sub cmd_punch {
    my @symlst = symlist(shift); 
    foreach my $sym (@symlst) {
	my $first = $sym->{addr};
	my $last = $first + $sym->{count} - 1;
	showmem($sym->{ref} . "\t", $first, $last);
    }
}

sub cmd_dump {
    my ($first, $last) = symres(@_);
    return if !defined $first;
    $last = $first + 10 if !defined $last;
    showmem("", $first, $last);
}

sub cmd_break {
    my ($addr) = symres(@_);
    return if !defined $addr;
    $brklst{$addr} = 1;
    printf "TACSIM: Breakpoint set at $npic.\n", $addr;
}

sub cmd_clrbrk {
    my ($addr) = symres(@_);
    return if !defined $addr;
    if($brklst{$addr}) {
	delete $brklst{$addr};
	printf "TACSIM: Breakpoint at $npic cleared.\n", $addr;
    } else {
	printf "TACSIM: No breakpoint at $npic.\n", $addr;
    }
}

sub cmd_clrall {
    my $brkcnt = scalar keys %brklst;
    %brklst = ();
    printf "TACSIM: %d breakpoints cleared.\n", $brkcnt;
}

sub cmd_lstbrk {
    if(my $brkcnt = scalar keys %brklst) {
	printf "TACSIM: Breakpoints:\n";
	foreach my $brk (keys %brklst) {
	    printf "$npic ", $brk;
	}
	printf "\n";
    } else {
	print "TACSIM: No breakpoints.\n";
    }
}

sub cmd_clrwat {
    $wchlst = "";
    printf "TACSIM: Watchlist cleared.\n";
}

sub addwatch {
    my @symlst = symlist(shift);
    return join ', ', map { $_->{ref} } @symlst;
}

sub cmd_watch {
    my $wl = shift;
    if($wl eq '?') {
	my $wh = qq/Watch: Enter one or more addresses, symbols or arrays 
	(symbols with subscript). Example: w n[3], a, b
	The values referenced by these item will be output at each break.
	To extend the existing watchlist use: w *, x, y
	This adds x and y to the existing watchlist.\n/;
	$wh =~ s/\t//g;
	print $wh;
	return;
    }								 
    if($wl) {
	if($wl =~ /^\*\s*,\s*(.*)$/) {
	    $wchlst .= ($wl = addwatch($1) ? ", $1" : "");
	} else {
	    $wchlst = ($wl = addwatch($wl) ? $wl : $wchlst);
	}
    }
    if($wchlst) {
	print "TACSIM: Watching: $wchlst\n";
    } else {
	print "TACSIM: No watchlist.\n";
    }
}

sub cmd_go {
    my $addr = shift;
    if(!defined $addr) {
	$addr = $memptr;
    } else {
	($addr) = symres($addr);
    }
    return if(!defined $addr);
    
    $memptr = $addr;
    my $cnt = 0;
    $halted = 0;
    while ($memptr >= 0 && !$halted) {
	# check breakpoint; doline returns -1 after last line
	last if(($cnt++ && exists($brklst{$memptr})) || (doline() < 0)); 
    }
    if(exists $brklst{$memptr}) {
	printf "TACSIM halted at Breakpint at $npic.\n", $memptr;
	cmd_prline();
    }
}

sub dopragma {
    my ($what, $args) = @_;
    if($what =~ /^dump$/i) {
	# print "PRAGMA dump $args\n";
	$dumps = $args;
    } elsif($what =~/^print$/i) {
	# print "PRAGMA print $args\n";
	$punch = $args;
    } elsif($what =~/^read$/i) {
	# print "PRAGMA read $args\n";
	$datafile = $args;
    } else {
	print "TACSIM: WARN: Unknown PRAGMA $what.\n";
    }
}

# main
if(defined($srcfile)) {
    print "TACSIM: Reading input from $srcfile.\n" if !$quiet;
    @lines = expand(read_file($srcfile, chomp => 1)); # chomp & untabify
}

# pass one, populate symtab

$lineno=1;
foreach my $line (@lines) {
    $line =~ s/;.*$//; # remove comments
    #printf "$npic L:%05d: $line\n", $memptr, $lineno;
    my $setmem = 1;
    if($line =~ /^#pragma\s+(\w+)\s+(.*)$/i) {
	dopragma($1, $2);
	$lineno++;
	next;
    }
    if($line =~ /^((?|[[:alpha:]]|\.)[[:alnum:]]*)([:=])\s+(\S+)(\s+(\S+))?/) {
	# print "SYM: $1 $2 /$3/ /$4/ $5\n";
	# label or memory assignemt
	if($2 eq ':') {
	    # label
	    $symtab{uc $1} = [$memptr, $1];
	}
	if($2 eq '=') {
	    if($1 eq '.') {
		# set mem ptr
		$memptr = $3;
		$setmem = 0;
	    } else {
		# mem assign
		my $cnt = 1;
		$symtab{uc $1} = [$memptr, $1];
		my $data = $5;
		if($data !~ /^(\d+)(\*(\d+))?/) {
		    # symbolic data
		    # print "SYMDAT: $1 $2 $3 $data\n";
		    ($data, undef) = @{$symtab{uc $data}};
		} else {
		    $cnt = defined $3 ? $3 : 1;
		    $data = $1;
		}
		for(my $n = 0; $n < $cnt; $n++) {
		    # print "SETMEM $cnt $memptr $data\n";
		    $mem[$memptr++] = $data;
		}
		$setmem = 0;
		    
	    }
	}
    }
    if($line =~ /^(\w+:)?\s*(\S+)\s*(\S*)/ && $setmem) {
	# print "DEPOSIT $memptr " . (($2 eq "MEM") ? $3 : $lineno) . "\n";
	$mem[$memptr++] = ($2 eq "MEM") ? $3 : $lineno;
    }
    $lineno++;
}

while(my($sym,  $val) = each(%symtab)) {
    $revtab{$val->[0]} = $val->[1] . "(" . $val->[0] . ")";
}

if(defined($datafile)) {
    if(exists $symtab{DATA}) {
	print "TACSIM: ERROR: DATA section in program, cannot read DATA from file.\n";
    } else {
	$datafile =~ /^(.*)\@(.*)$/;
	my ($datanam, $datasym) = ($1, $2);
	
	my ($dataloc) = symres(($datasym));
	die "Fatal: Could not resolve data location $datasym.\n" 
	    if !defined $dataloc;
	$datasym .= "($dataloc)" if($dataloc ne $datasym);
	print "TACSIM: Reading data from $datanam to $datasym.\n" if !$quiet;
	my $valstr = read_file($datanam, chomp => 1)
	    or die "Error: Cannot open datafile >$datanam< for reading.\n";
	
	# initialze data pointer
	$symtab{DATPTR} = [$dataloc, 'DATPTR'];
	$mem[$dataloc] = $dataloc + 1;
	# set DATA symbol for reset
	$symtab{DATA} = [++$dataloc, 'DATA'];
	
	my @values = split /\s+/, $valstr;
	foreach my $val (@values) {
	    # printf "DATASET $npic: $npic\n", $dataloc, $val;
	    $mem[$dataloc++] = $val;
	}
    }
}

# pass two, interpret

$memptr = 0;
$lineno = $mem[$memptr];

if($inter) {
    my $term = Term::ReadLine->new('TACSIM');
    $term->ornaments(0);
    my $prompt = "tacsim\$ ";
    my $OUT = $term->OUT || \*STDOUT;
    cmd_prline();
    while($running) {
	last if( !defined ($_ = $term->readline($prompt)));
	my $res = docmd($_);
	$term->addhistory($_) if /\S/;
    }
} else {
    cmd_go();
}

if(defined $dumps) {
    if($dumps =~ /^(\S+)\s*,\s*(\S+)\s*$/) {
	cmd_dump($1, $2);
    } else {
	cmd_dump($dumps);
    }
}

if(defined $punch) {
    cmd_punch($punch);
}

exit 0;

# EOF
