#! /usr/bin/perl

# tac - the three address code machine simulatur/interpreter
#
# implements a virtual cpu with 4k memory holding values between 0 and 1023
# and the following commands, involving up to three memory locations.
#
# The cpu consequently has not registers and the program counter is not
# user visible. Operations set conditions flags (zero, negative, carry)
# 
# Syntax:
# - normal arg is direct (dir) address, mem[arg]
# - leading asterisk (*) denotes indirection (ind), mem[mem[arg]]
# - leading hash (#) denotes immediate value (imm), arg
# - a dollar sign ($) denotes current line number+1 (i.e. next instruction)
#
# Addreviations:
# - <imm-or-addr> : either #<imm> or <addr> or *<addr>
# - <dir-or-ind>  : either <addr> or *<addr>
#
# Move first argument to second
#   mov <imm-or-addr> <dir-or-ind> 
# Dyadic arithmetic/logic (add, sub, mul, div, and, ior, xor)
#   add <imm-or-addr> <imm-or-addr> <dir-or-addr>
# Monadic arithmetic/logic (com[plement], not)
#   com <imm-or-addr> <dir-or-addr>
# Bit shifting (of: logical or arithmentc, shift or rotate, left or right, 
# with or without carry)
# Implemented: logical shift/rotate left/right with carry
# Commands: shl/shr/rol/ror
#   shl <imm-or-addr> <dir-or-addr>
# Compare (like sub but only sets flag)
#   cmp <imm-or-addr> <imm-or-addr>
# Branching (jmp, jze (zero or equal), jnz (not zero), 
# jlz (less than zero = negative), jcs (carry set) 
#   jmp <addr>, jsr <dir-or-addr> <addr> (move retvec arg1, jmp arg2)
# Miscelaeneous: Clear carry flag, no-operation, halt
#   clc
#   nop
#   hlt
#
#####################

use strict;

use Data::Dumper;
use Term::ReadLine;
use Getopt::Long;
use File::Slurp;

# machine size
my $maxcells = 1 << 10; # 10 bit, 1024 memory cells, max unsigned is 1023
my $maxlines = $maxcells;

# cmdline options
my ($srcfile, $helpme, $dumpstart, $trace, $quiet, $inter);

GetOptions(
    "help|?" => \$helpme,
    "file=s" => \$srcfile,
    "dump=i" => \$dumpstart,
    "trace" => \$trace,
    "quiet" => \$quiet,
    "interactive" => \$inter,
    ) or die("Fatal error: Cannot understand options");

# data mem and prog lines
my @mem = (); $mem[$maxcells-1] = 0; # setup mem to be of size maxcells
my @lines = ();
my $lineno = 0;
my %brklst = ();

# symbols
my $memptr = 0;
my %symtab = ();
my %cond = ('Z' => 0, 'N' => 0, 'C' => 0);

sub taceval {
    my @words = split /\s+/, shift;
    my $wordno = 0;
    my $cmdproc = undef;
    my @arglist = ();
    my @val;
    # print "WORDS: " . join(',', @words) . "\n";
    WORD: foreach my $word (@words) {
	$wordno++;
	last WORD if $word =~ /^;/; # discard word after comment sign ';'
	if(($wordno == 1) && ($word =~ /^[[:alpha:]][[:alnum:]]*[:=]$/)) {
	    # a word in first position starting with a alpha char is a label
	    # or a memory assignment already processed in first pass
	} else {
	    # cmd or arg
	    # print "WORK: $word\n";
	    my $subname = "tac_" . lc $word;
	    if(my $proc = __PACKAGE__->can($subname)) {
		$cmdproc = $proc;
		# valid command
	    } else {
		# its an arg
		# print "ARG $word\n";
		if($word =~ /^([#*\@]?)(\S+)$/) {
		    @val = [$2, $1]; # value, mode
		} elsif($word eq '$') {
		    @val = [$lineno+1, '#'];
		} else {
		    # empty word
		}
		push @arglist, @val;
	    }
	}
    }

    my $nxtline = $lineno + 1;
    if(defined $cmdproc) {
	# call cmd proc
	my $retline = $cmdproc->(@arglist);
	$nxtline = $retline if $retline;
    } elsif (my $nargs = @arglist) {
	# no cmd, but args -> err
	print "Error: Invalid command in line $lineno.\n";
    } else {
	# no command in line, just comment
    }
    $lineno = $nxtline;
}

sub tacargs {
    my @fixed = ();
    my $trace = "";
    my $dirind = shift;
    my $argcnt = scalar @{$dirind};
    if($argcnt != scalar(@_)) {
	print "Error: Expected $argcnt operands in line $lineno.\n";
    } else {
	foreach my $arg (@_) {
	    my $dir = shift $dirind;
	    my ($val, $mode) = @{ $arg };
	    # print "TACARG: $val, $mode, $dir\n";
	    $trace .= " $val";
	    if($val eq '$') {
		$val = $lineno + 2;
		$mode = '#';
		$trace .= "($val)";
	    } elsif($val =~ /^(\D\S*)/) {
		# does not start with a digit -> label
		$val = $symtab{$val};
		$trace .= "($val)";
		if(!$val) {
		    print STDERR "Warning: Undefined symbol $1 in line $lineno\n";
		}
	    }
	    # print "SYMREF: $val, $mode, $dir\n";
	    if($mode eq '*') {
		# val is addr
		$val = $mem[$val];
		$trace .= "->$val" 
	    } 
	    if($mode ne '#' && $dir eq 'R') {
		# reading,  direct and indirect
		$val = $mem[$val];
		$trace .= "=$val";
	    }
	    push @fixed, 0+$val;
	}
    }
    #print "FIX: " . Dumper(@fixed);
    return (@fixed, $trace);
}

sub taccond {
    my $val = shift;
    #print "COND: $val " . ($maxcells >> 1);
    $cond{'Z'} = ($val == 0) ? 1 : 0;
    $cond{'N'} = ($val > ($maxcells >> 1)) ? 1 : 0;
    #print " N: " . $cond{'N'} . "\n";
}

sub tacscale {
    my ($val, $mode) = @_;
    my $res = $val % $maxcells;
    taccond($res) unless($mode =~ /nocond/);
    if($val != $res && $mode !~ /nowarn/) {
	print "Warning: Value $val scaled to $res in line $lineno\n";
    }
    return $res;
}

sub tac_mem {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    prtrace("MEM[$memptr]", $argtrace) if $trace;
    $mem[$memptr++] = tacscale($args[0]);
    return 0;
}

sub tac_mov {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    $mem[$args[1]] = my $res = tacscale($args[0]);
    prtrace("MOV", $argtrace, $res) if $trace;
    return 0;
}

sub tac_add {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] + $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("ADD", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_sub {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] - $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("SUB", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_mul {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] * $args[1];
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("MUL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_div {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = int ($args[0] / $args[1]);
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[2]] = $res = tacscale($res, 'nowarn');
    prtrace("DIV", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_com {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale((~$args[0])+1, 'nowarn');
    $mem[$args[1]] = $res;
    prtrace("COM", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_and {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] & $args[1]);
    $mem[$args[2]] = $res;
    prtrace("AND", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_ior {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] | $args[1]);
    $mem[$args[2]] = $res;
    prtrace("IOR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_xor {
    my @args = tacargs(['R', 'R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0] ^ $args[1]);
    $mem[$args[2]] = $res;
    prtrace("XOR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_not {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale(~$args[0], 'nowarn');
    $mem[$args[1]] = $res;
    prtrace("NOT", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_shl {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] << 1;
    $cond{'C'} = ($res & ($maxcells >> 1)) ? 1 : 0;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("SHL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_shr {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    $cond{'C'} = $args[0] & 1;
    my $res = $args[0] >> 1;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("SHR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_rol {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $res = ($args[0] << 1) | $cond{'C'};
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("ROL", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_ror {
    my @args = tacargs(['R', 'W'], @_);
    my $argtrace = pop @args;
    my $carry = $args[0] & 1;
    my $res = (($args[0] >> 1) | ($cond{'C'} ? ($maxcells >> 1) : 0));
    $cond{'C'} = $carry;
    $mem[$args[1]] = $res = tacscale($res, 'nowarn');
    prtrace("ROR", $argtrace, $res, 'cond') if $trace;
    return 0;
}

sub tac_cmp {
    my @args = tacargs(['R', 'R'], @_);
    my $argtrace = pop @args;
    my $res = $args[0] - $args[1];
    #print "CMP Result: $res\n";
    $cond{'C'} = ($res & $maxcells) ? 1 : 0;
    $res = tacscale($res, 'nowarn');
    #print "CMP Result: $res\n";
    prtrace("CMP", $argtrace, undef, 'cond') if $trace;
    return 0;
}

sub tac_clc {
    my @args = tacargs([], @_);
    my $argtrace = pop @args;
    $cond{'C'} = 0;
    prtrace("CLC", $argtrace, undef, 'cond') if $trace;
    return 0;
}

sub tac_jmp {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0]);
    prtrace("JMP", $argtrace) if $trace;
    return $res;
}    

sub tac_jsr {
    my @args = tacargs(['W', 'W'], @_);
    my $argtrace = pop @args;
    $mem[$args[0]] = $lineno + 1;
    my $res = tacscale($args[1]);
    prtrace("JSR", $argtrace) if $trace;
    return $res;
}    

sub tac_jze {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JZE", $argtrace, 0, 'cond') if $trace;
    return $cond{'Z'} ? $res : 0;
}    

sub tac_jnz {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JNZ", $argtrace, 0, 'cond') if $trace;
    return $cond{'Z'} ? 0 : $res;
}    

sub tac_jlz {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JLZ", $argtrace) if $trace;
    return $cond{'N'} ? $res : 0;
}    

sub tac_jcs {
    my @args = tacargs(['W'], @_);
    my $argtrace = pop @args;
    my $res = tacscale($args[0], 'nocond');
    prtrace("JCS", $argtrace) if $trace;
    return $cond{'C'} ? $res : 0;
}    

sub tac_nop {
    prtrace("NOP") if $trace;
    return 0;
}

sub tac_hlt {
    prtrace("HLT") if $trace;
    print "TACSIM STOPPED. Machine halted.\n";
    return -1;
}

sub prtrace {
    my ($cmd, $argtrace, $res, $condtrace) = @_;
    printf "TRACE> %06s: $cmd " . $argtrace, $lineno;
    print "<=" . $res if defined $res;
    printf(" ;COND Z:%d N:%d C:%d",
	   $cond{'Z'}, $cond{'N'}, $cond{'C'}) if defined $condtrace;
    print "\n";
}

sub doline {
    my $line = $lines[$lineno-1];
    if($line =~ /^.=\s+(\d+)/) {
	# mem ptr assignement, set and quit processin lin
	$memptr = $1;
	$lineno++;   
    } else {
	taceval($line);
    }
    if($lineno > $maxlines) {
	print "TACSIM STOPPED. You fell off the cliff.\n";
	return -1;
    }
    return 0;
}

sub docmd {
    my $cmdln = shift;
    if($cmdln =~ /^\s*$/) {
	doline();
    } elsif($cmdln =~/^\.$/) {
	cmd_prline();
    } elsif($cmdln =~/^q$/) {
	exit 0;
    } elsif($cmdln =~/^t$/) {
	if($trace) {
	    $trace = 0;
	    print "TACSIM: Trace off.\n";
	} else {
	    $trace = 1;
	    print "TACSIM: Trace on.\n";
	}
    } elsif($cmdln =~/^g(\s+(\d+))?$/) {
	cmd_go($2);
    } elsif($cmdln =~/^d\s+(\d+)$/) {
	cmd_dump($1);
    } elsif($cmdln =~/^b\s+(\d+)$/) {
	cmd_break($1);
    } elsif($cmdln =~/^bc\s+(\d+)$/) {
	cmd_clrbrk($1);
    } elsif($cmdln =~/^bl$/) {
	cmd_lstbrk($1);
    } elsif($cmdln =~/^l\s+(\d+)\s*,\s*(\d+)$/) {
	cmd_list($1);
    } else {
	print "TACSIM: Unknown command or missing arguments: $cmdln\n";
    }
}

sub cmd_prline {
    printf("%06d: %s\n", $lineno, $lines[$lineno-1]) if ($lineno > 0);
}

sub cmd_dump {
    my $dumpstart = shift;
    printf("%06d: ", $dumpstart);
    for(my $i = 0; $i < 10; $i++) {
	printf("%6d ", $mem[$dumpstart+$i]);
    }
    print "\n";
}

sub cmd_break {
    my $addr = shift;
    $brklst{$addr} = 1;
    printf "TACSIM: Breakpoint set at %06d.\n", $addr;
}

sub cmd_clrbrk {
    my $addr = shift;
    if($brklst{$addr}) {
	delete $brklst{$addr};
	printf "TACSIM: Breakpoint at %06d cleared.\n", $addr;
    } else {
	printf "TACSIM: No breakpoint at %06d.\n", $addr;
    }
}

sub cmd_lstbrk {
    printf "TACSIM: Breakpoints:\n";
    foreach my $brk (keys %brklst) {
	printf "%06d ", $brk;
    }
    printf "\n";
}

sub cmd_go {
    my $addr = shift;
    $lineno = $addr if($addr);
    my $cnt = 0;
    while ($lineno > 0) {
	# check breakpoint; doline returns -1 after last line
	last if(($cnt++ && exists($brklst{$lineno})) || (doline() < 0)); 
    }
}

# main
if(defined($srcfile)) {
    print "TACSIM: Reading input from $srcfile.\n" if !$quiet;
    @lines = read_file($srcfile, chomp => 1); # will chomp() each line
}

# pass one, populate symtab

$lineno=1;
foreach my $line (@lines) {
    # print "LINE: $line\n";
    if($line =~ /^((?|[[:alpha:]]|\.)[[:alnum:]]*)([:=])\s+(\S+)/) {
	# print "SYM: $1 $2 $3\n";
	# label or memory assignemt
	if($2 eq ':') {
	    # label
	    $symtab{$1} = $lineno;
	}
	if($2 eq '=') {
	    if($1 eq '.') {
		# set mem ptr
		$memptr = $3;
	    } else {
		# mem assign
		$symtab{$1} = $memptr++;
	    }
	}
    }
    $lineno++;
}

# pass two, interpret

$memptr=0;
$lineno=1;

if($inter) {
    my $term = Term::ReadLine->new('TACSIM');
    $term->ornaments(0);
    my $prompt = "tacsim>";
    my $OUT = $term->OUT || \*STDOUT;
    my $shown = -1;
    while(1) {
	if($lineno != $shown) {
	    cmd_prline();
	    $shown = $lineno;
	}
	last if( !defined ($_ = $term->readline($prompt)));
	my $res = docmd($_);
	#warn $@ if $@;
	#print $OUT $res, "\n" unless $@;
	$term->addhistory($_) if /\S/;
    }
    print "\n";
} else {
    cmd_go();
}

if(defined $dumpstart) {
    cmd_dump($dumpstart);
}

exit 0;

# EOF
