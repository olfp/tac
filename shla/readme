shlc is a shla (pronounced "shiela") compiler.

To run you need Perll with the Pegex module installed.

This shlc compiles to tac assembler. Shla is the simple high-level language.
The shla syntax is vaguely C like, while simpler. There is only one
datatype, the machine word (like BCPL). There are array (of words).

var i, j <- 42, n[10];

declares i (defaults to 0), j (initialized to 42) and n (an array with 10
elements).

There may be a data declaration (like in Fortran or Basic).

data 1, 3, 5, 7, 11, 13;

Defines six word the program can access with the read statement.

Subroutines can be defined (and called later), but there are no local variables.

sub myname(ref p, val q, ...) { ... }

Defines a subroutine named myname with formal parameters p and q. Parameters
can be pass as value (val, the default) or reference (ref). When passing array
they mus be passed as ref (else only the first value will be correct).

Subroutines can be called later with actual parameters as

call myname(u, v, ...);

The main routine is defined by

main { ... }

Within subroutines and the main routine the programm consits of a series
of statements. These are either followed by a semicolon or a statement block.

Assignment statement, allowing arbitrary expression on the right hand side.
Supported operators are +, -, *, /, &, |, ^ plus unary - and !.

  a <- 2 * (i + 1);
  k <- l & !m;

Loop statement, forming an endless loop around it's statement block:

  loop { ... }

The stop-on statement, for breaking out of the loop under certian
conditions (see the if-else statement for supported relational operators):

  stop on(i > 9);

The if-else statement, allowing conditiona exection of one oftwo alternatives.
The else part is optional. The supported relational operators
are <, >, <=, >=, =, <> 

  if(n > 10) { ... } else { ... }
  if(i = 0) { ... }
  
The call statment, calling a subroutine, was already discussed.

Commands can be passed to the simulator by embedding #pragma command in
the declaration part. This allows to read data before starting the programm
and printing data afterward. For printing ten word starting at label res:

  #pragma print res[10]

Comments start with // as go to the end of line (as in C++).

There are no input or output statements or other provisions.

Reserved words are MAIN, DATA, DATPTR, RESET and L00001 to L99999.


Example program:

// select odd numbers

#pragma print res[10]

var n, half, res[10], i;

data 1,2,3,4,5,6,7,-1;

main {
     i <- 0;
     loop {
     	  read n;
	  stop on(n < 0);
	  half <- n / 2;
	  if(n <> half * 2) {
	       res[i] <- n;
	       i <- i + 1;
	  }
     }
}

// end

You can compile this and run it in the tacsim simulator, like this:
$ shlc testodd.shl -o testodd.tac
$ tacsim -q testodd.tac -p res[10] 
res[10] 0102: 0001 0003 0005 0007 0000 0000 0000 0000 0000 0000


Implementation notes:
Normaly shlc implements a software stack for parameter passing and
allocation of local vars. When run with -n (nostack) this is omitted.
Currently this means cal params and locals are not implemented.

Suggestion: Implement a static calling convention, lifting this
restriction. Reentrancy/recursion of course will continue not to work.
Attention: This needs the ability to adress *FOO+X aka (*FOO)+X not *(FOO+X)
which is currently unsupported (indirect indexed adressing)

Caller:

ARG1:	MEM 43
ARG2=	69

	JSR MYSUB		; Jump to subroutine
	MEM ARG1		; First arg, call by ref
	MEM ARG2		; Second (and last) arg, call by value
CONT:	... 			; Sub needs to return here

Callee:

MYSUB:	SRS
	...
	MOV *MYSUB TEMP		; Return adress points to first arg, is ref	
	ADD *TEMP *MYSUB+1 RES	; Add value of first arg with second (value)
	..
	JMP *MYSUB+2  	    	; Jumps over the two args, to CONT

Locals can be allocated just before the entry point:

Callee:

MYSL1:	MEM 0			; First local
MYSL2:	MEM 42			; Second local, non-tero init
MYSUB:	SRS
	...
	ADD MYSUB-1 MYSUB-2 RES	; Locals cann be accessed relative to entry point
	SUB MYSL1 MYSL2 RES 	; or labels con be given for locals (but in global name space)
	...
	JMP *MYSUB

Another Example:

Caller:

VARA:	13
VARB:	42
	...
	JSR SWAP
	MEM VARA		; Adress of first arg (call by ref)
	MEM VARB		; Adress of second arg
	...
	
Now VARA is 42 and VARB is 13.	

Callee:

LOCT:	MEM 0
SWAP:	SRS
	MOV *SWAP LOCT
	MOV *SWAP+1 *SWAP
	MOV LOCT *SWAP+1
	JMP *SWAP+2

If extending the TAC with indexed indrect adressing is not desirable,
the params can be storted before the subroutine as with locals:

Caller:

VARA:	13
VARB:	42
VALC=	69
	...
	MOV #VARA, SWAP-1
	MOV #VARB, SWAP-2
	MOV #VALC, SWAP-3
	JSR SWAP
	...

Callee:

TEMP:	MEM 0
	MEM 0			; 3rd param
	MEM 0			; 2nd param
	MEM 0			; 1st param
SWAP:	SRS
	MOV *(SWAP-1) TEMP
	MOV *(SWAP-1) *(SWAP-2)
	MOV TEMP *(SWAP-2)
	...
	JMP *SWAP

# EOF