//
// Test for BCD arithmetic with SHLA
// First round: One dight per mem cell
// In-memory format is one count word and <count> digit words
//

#pragma bits 12
#pragma read bcd.dat@heap
#pragma print z1[10],z2[10],res[10]

var z1[10], z2[10], res[10];
//var z1[10], z2[10], res[10], d, dx, dy, e, x, y, u, w, ;
//var ndig, subdig, i, grp, digpergrp <- 3;
var digpergrp <- 3;

sub putbcd(d, ref v, grp, pos) {
  loop {
    stop on(pos < 1);
    d <- d << 4;
    pos <- pos - 1;
  }
  v[grp] <- v[grp] | d;
}

sub getbcd(ref d, ref v, grp, pos) {
  d <- v[grp];
  loop {
    stop on(pos < 1);
    d <- d >> 4;
    pos <- pos - 1;
  }
  d <- d & 15;
}

sub readbcd2p(ref num) {
  local d, subdig <- 0, ndig <- 1, grp <- 1;
  // Read packed bcd from unpacked bcd data.
  // Input: One digit per word, lsd first, >9 terminates
  // Each word is a digit grp and has digpergrp subdigs
  loop {
    read d;
    stop on(d > 9);
    call putbcd(d & 15, num, grp, subdig);
    ndig <- ndig + 1;
    subdig <- subdig + 1;
    if(subdig >= digpergrp) {
      subdig <- 0;
      grp <- grp + 1;
    }
  }
  num[0] <- ndig - 1; // digit count
}

sub sumbcd(ref a, ref b, ref c) {
  local u <- 0, i <- 1, grp <- 1, subdig <- 0, e, dx, dy, d;
  // u <- 0;
  // i <- 1;
  // grp <- 1;
  // subdig <- 0;
  loop {
    e <- 0;
    if(a[0] < i) {
      dx <- 0;
      e <- e + 1;
    } else {
      call getbcd(dx, a, grp, subdig); 
    }
    if(b[0] < i) {
      dy <- 0;
      e <- e + 1;
    } else {
      call getbcd(dy, b, grp, subdig); 
    }
    stop on(e > 1);
    d <- dx + dy + u;		// sum digits and carry
    if(d > 9) {		 	// overflow
      u <- 1;			// new carry
      d <- d - 10;		// digit is 9
    } else {
      u <- 0;
    }
    call putbcd(d, c, grp, subdig);
    subdig <- subdig + 1;
    if(subdig >= digpergrp) {
      subdig <- 0;
      grp <- grp + 1;
    }
    i <- i + 1;
  }
  if(u > 0) {
    call putbcd(u, c, grp, subdig); // final carry is msd
    i <- i + 1;
  }
  c[0] <- i - 1;		// result digit count
}

main {
  call readbcd2p(z1);
  call readbcd2p(z2);  
  // compute a + b
  call sumbcd(z1, z2, res);
}
