#! /usr/bin/perl

use strict;
use FindBin;
use lib "$FindBin::Bin/lib";

use Pegex;
use File::Slurp;
use Getopt::Long;

my $grammar = <<'...';
# Precedence Climbing grammar:
%grammar shla
%version 0.2.0

#program: /- <declarations>  - <mainproc>/
progra: /- ( <declarations> )*  -/

# General Tokens
escape: / [0nt] /
line: / ANY* EOL /
blanks: / BLANK+ /
blank-line: / BLANK* EOL /
comment: / '//' line /
ws: /(: BLANK | EOL | comment )/

declarations: / <vardecl> | <subdecl> /
vardecl: /- 'var' ( <vardef> | <varlist> ) - SEMI -/
varlist: / <vardef>+ % - COMMA /
#varlist: /- <vardef>+ - /
vardef: / <name> - ( '<-' <number> )? /
subdecl: / - 'sub' - /
token: /- LPAREN - <expr> - RPAREN | <number> | <variable> /
number: /- ( '-'? DIGIT+ )/
name: /- ( ALPHA WORD* )/
...

=For waste
mainproc: /- 'main' - <block> -/
subdecl: /- 'sub' - <name> - <block> -/
block: / <begin> <statements>? <end> /
begin: /- LCURLY -/ 
end: /- RCURLY -/ 
statements: / <simplestmts> | <blockstmt> /
simplestmts: /- <simplestmt>+ % SEMI -/
simplestmt: / <assign> | <subcall> | <breakgrp> /
subcall: /- 'call' -/ name
breakgrp: <stopon>
stopon: /- 'stop' - 'on' - LPAREN -/ gocondition /- RPAREN -/ SEMI
assign: /- <name> - '<-' <expr> -/
expr: /- ( '-'? ) <addsub> /
addsub: / <muldiv>+ % - ( [ '+-' ])/
muldiv: / <token>+ % - ([ '*/' ])/
=cut

{
    package Shla;
    use Data::Dumper;
    use base 'Pegex::Tree';
    
    my $maxnum = 0x3ff;
    my %opcode = (
	'+' => 'ADD',
	'-' => 'SUB',
	'*' => 'MUL',
	'/' => 'DIV',
	'<-' => 'MOV',
	);

    my $t = 0;
    my $labelno = 0;
    my @labels = ();
    my $haslbl = 0;
    my $isdecl = 0;

    sub initial {
	print "; shlc SHLA compilation " . localtime() . "\n";
	print "; mem locs 1-99 are temp vars for expr eval\n";
	print "RESET:\tJMP MAIN\n";
	print ".=\t100\n";
	$isdecl = 1;

        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

=for com    
    sub got_subs {
	$isdecl = 0;
    
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_main {
	print "MAIN:\t";
	$haslbl = 1;
    
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_declare {
        my ($self, $list) = @_;
        return $list unless ref $list;

	while (@$list > 1) {
	    my ($var) = splice(@$list, 0, 2);
	    if($isdecl) {
		print "$var=\tMEM 0\n";
	    }
	}
        return @$list;
    }

    sub got_assign {
        my ($self, $list) = @_;
        return $list unless ref $list;

	while (@$list > 1) {
	    my ($var, $val) = splice(@$list, 0, 2);
	    if($isdecl) {
		print "$var=\tMEM $val\n";
	    } else {
		$val = "#$val" if($val =~ /^\d/);
		$val =~ s/^@(\d+)/$1/;
		print "\t" if !$haslbl;
		print "MOV $val $var\n";
		$haslbl = 0;
	    }
	}
        return @$list;
    }

    sub got_docondition {
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "DO-COND" . join('/', @$list) . "\n";
	my ($a, $rel, $b) = splice(@$list, 0, 3);

	$haslbl = makecond($a, $rel, $b, $haslbl, 'do');

        return @$list;
    }

    sub got_gocondition {
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "GO-COND" . join('/', @$list) . "\n";
	my ($a, $rel, $b) = splice(@$list, 0, 3);

	$haslbl = makecond($a, $rel, $b, $haslbl, 'go');

        return @$list;
    }

    sub makecond {
	my ($a, $rel, $b, $haslbl, $mode) = @_;
	
	my $loopno = pop @labels;
	push @labels, ++$labelno;
	push @labels, $loopno;
	my $endlop = sprintf "L%05d", $labelno;
	my $doorgo = ($mode eq 'do');

	my @jumps = ();
	if($rel eq '=') {
	    push @jumps, ($doorgo ? 'JNE' : 'JEQ');
	} elsif($rel eq '<>') {
	    push @jumps, ($doorgo ? 'JEQ' : 'JNE');
	} elsif($rel eq '>') {
	    push @jumps, ($doorgo ? ('JEQ', 'JLE') : 'JGT');
	} elsif($rel eq '=>') {
	    push @jumps, ($doorgo ? 'JLE' : ('JEQ', 'JGT'));
	} elsif($rel eq '<') {
	    push @jumps, ($doorgo ? ('JEQ', 'JGT') : 'JLE');
	} elsif($rel eq '<=') {
	    push @jumps, ($doorgo ? 'JGT' : ('JEQ', 'JLE'));
	} else {
	    die "FATAL: Undefined relational operator '$rel'.\n";
	}
	print "\t" if !$haslbl;
	$a = "#$a" if($a =~ /^\d/);
	$a =~ s/^@(\d+)/$1/;
	$b = "#$b" if($b =~ /^\d/);
	$b =~ s/^@(\d+)/$1/;
	print "CMP $a $b\n";
	foreach my $jump (@jumps) {
	    print "\t$jump $endlop\n";
	}
	$haslbl = 0;

	return $haslbl;
    }	
    
    sub got_loophook {
	if($haslbl) {
	    print "NOP\n";
	    $haslbl = 0;
	}
	push @labels, ++$labelno;
	printf "L%05d:\t", $labelno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_elsehook {
	my $lno0 = pop @labels; # unused if label
	my $lno1 = pop @labels; # target of not-cond
	push @labels, ++$labelno;
	push @labels, $lno1;
	printf "\tJMP L%05d\n", $labelno;
	printf "L%05d:\t", $lno1;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_subname {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "SUB: " . join('/', @$list) . "\n";

 	while (@$list > 1) {
	    my ($var, $val) = splice(@$list, 0, 2);
	    printf "L%05s:\tMEM 0\n", $var;
	    push @labels, $var;
	}
	
       return @$list;
    }

    sub got_subdecl {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print Dumper(@$list);

	my $sub = pop @labels;
	printf "\tJMP *L%05s\n", $sub;
	return @$list;
    }

    sub got_subcall {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "CALL: " . join('/', @$list) . "\n";

 	while (@$list > 1) {
	    my ($var) = splice(@$list, 0, 2);
	    print "\t" if !$haslbl;
	    printf "JSR L%05s\n", $var;
	    $haslbl = 1;
	}
        return @$list;
    }

    sub got_block {
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_loop {
	my $lno = pop @labels;
	print "\t" if !$haslbl;
	printf "JMP L%05d\n", $lno;
	$haslbl = 0;
	
	my $lno = pop @labels;
	printf "L%05d:\t", $lno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "LOOP\n";

        return @$list;
    }

    sub got_if {
	my $lno = pop @labels;
	#print "\t" if !$haslbl;
	#printf "JMP L%05d\n", $lno;
	#$haslbl = 0;
	
	my $lno = pop @labels;
	printf "L%05d:\t", $lno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "WHILE\n";

        return @$list;
    }

    sub got_addsub {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "COMP: " . join('/', @$list) . "\n";

	while (@$list > 1) {
	    my ($a, $op, $b) = splice(@$list, 0, 3);
	    $a = "#$a" if($a =~ /^\d/);
	    $a =~ s/^@(\d+)/$1/;
	    $b = "#$b" if($b =~ /^\d/);
	    $b =~ s/^@(\d+)/$1/;
	    print "\t" if !$haslbl;
	    print $opcode{$op} . " $a $b $t\n";
	    $haslbl = 0;
	    unshift @$list, "\@$t"; $t++;
	}
        return @$list;
    }

    sub got_expr {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "EXPR: " . join('/', @$list) . "\n";
	while (@$list > 1) {
	    my ($s, $v) = splice(@$list, 0, 2);
	    if($s eq '-') {
		if($isdecl) {
		    my $cv = ((~($v & $maxnum) + 1) & $maxnum);
		    unshift @$list, $cv;
		} else {
		    print "\t" if !$haslbl;
		    print "COM $v $t\n";
		    $haslbl = 0;
		    unshift @$list, "$t"; $t++;
		}
	    } else {
		unshift @$list, $v;
	    }
	}

        return @$list;
    }

=cut
    sub gotrule {
        my ($self, $list) = @_;
	print "rule: <\n";
	#print join('>; <', @$list) if($list);
	print Dumper($list) if($list);
	print ">\n";
        return $list unless ref $list;


        return @$list;
    }

    sub final {
	print "HLT\n";
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }	
}

# cmdline options
my ($srcfile, $outfile, $helpme, $dumpstart, $trace, $quiet, $inter);

GetOptions(
    "help|?" => \$helpme,
    "output=s" => \$outfile,
    "quiet" => \$quiet,
    ) or die("FATAL: Cannot understand options.\n");

my ($srcfile, $endguard) = @ARGV;
die "Usage: taccc [ opts ] srcfile\n" 
    if(!defined $srcfile || defined $endguard || defined $helpme);

my $out = *STDOUT;
if(defined $outfile) {
    open($out, '>', $outfile) or die("FATAL: Cannot open $outfile for writing.\n");
}

my $src = read_file($srcfile, chomp => 1);
print "Parsing...\n";
pegex($grammar, 'Shla')->parse($src);

1; # EOF
