// bubble sort in shla

#pragma print data[10]

var data[10], i, o, on;

data 43,96,69,13,21,7,66,69,99,1;

sub swap(ref a, ref b) {
    local t;

    t <- a;
    a <- b;
    b <- t;
}

sub fill(d) {
    local i <- 0;

    loop {
        stop on(i > 9);
        read d[i];
        i <- i + 1;
    }
}

main {
    call fill(data);
    // sort array ascending
    o <- 9; // outer loop counter 9..0
    loop {
        // Each outer loop pass moves the biggest element to the end of the array.
        // Every pass is at least one element shorter.
        on <- 1; // next upper bound for outer loop initially 1
        i <- 0; // inner loop counter 0..o-1
        loop {
            // Each inner loop compares to adjacent elements and swaps if needed.
            // The loop runs up to the last unsorted element, as determined by the
            // outer loops bound o. The rightmost swap determins the highest
            // still unsorted element and is the upper bound for the next outer loop.
            stop on (i = o);
            if(data[i] > data[i+1]) {
                call swap(data[i], data[i+1]);
                on <- i + 1; // advance next outer loop bound to swapper element
            }
            i <- i + 1;
        }
        o <- on; // new outer upper bound is max swapped element
        stop on (o < 2);
    }
}
