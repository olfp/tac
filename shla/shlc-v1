#! /usr/bin/perl

use strict;
use FindBin;
use lib "$FindBin::Bin/lib";

use Pegex;
use File::Slurp;
use Getopt::Long;

my $grammar = <<'...';
# Precedence Climbing grammar:
program: comment* init declarations /- 'main' -/ begin main statements end
comment: /- '//' -/ ANY* EOL
init: // 
declarations: vardecl* subs subdecl*
subs: //
vardecl: /- 'var' -/ assign comment?
subdecl: /- 'sub' -/ subname block
subname: /- ( variable ) -/ 
main: //
statements:  statement+
statement: comment | assign | control | subcall
subcall: /- 'call' -/ variable ';'
control: while | if
while: /- 'while' - LPAREN -/ hook condition /- RPAREN -/ block
if: ifblock elseblock?
ifblock: /- 'if' - LPAREN -/ hook condition /- RPAREN -/ block
elseblock: /- 'else' -/ elsehook block
elsehook: //
hook: //
condition: expr /- ([ '<=>' ]+) -/ expr
block: begin statements? end
begin: /- LCURLY -/ comment*
end: /- RCURLY -/ comment*
assign: /- variable -/ '<-' expr ';'
expr: /- ( '-'? ) / addsub
addsub: muldiv+ % /- ( [ '+-' ])/
muldiv: token+ % /- ([ '*/' ])/
token: /- LPAREN -/ expr /- RPAREN/ | number | variable
number: /- ( '-'? DIGIT+ )/
variable: /- ( ALPHA WORD* )/
...

{
    package TACcc;
    use Data::Dumper;
    use base 'Pegex::Tree';

    my $maxnum = 0x3ff;
    my %opcode = (
	'+' => 'ADD',
	'-' => 'SUB',
	'*' => 'MUL',
	'/' => 'DIV',
	'<-' => 'MOV',
	);

    my $t = 0;
    my $labelno = 0;
    my @labels = ();
    my $haslbl = 0;
    my $isdecl = 0;
    
    sub got_init {
	print "; TACcc compilation " . localtime() . "\n";
	print "; mem locs 0-99 are temp vars for expr eval\n";
	print ".=\t100\n";
	$isdecl = 1;

        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_subs {
	print "INIT:\tJMP MAIN\n";
	$isdecl = 0;
    
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_main {
	print "MAIN:\t";
	$haslbl = 1;
    
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_assign {
        my ($self, $list) = @_;
        return $list unless ref $list;

	while (@$list > 1) {
	    my ($var, $val) = splice(@$list, 0, 2);
	    if($isdecl) {
		print "$var=\tMEM $val\n";
	    } else {
		$val = "#$val" if($val =~ /^\d/);
		$val =~ s/^@(\d+)/$1/;
		print "\t" if !$haslbl;
		print "MOV $val $var\n";
		$haslbl = 0;
	    }
	}
        return @$list;
    }

    sub got_condition {
        my ($self, $list) = @_;
        return $list unless ref $list;

	#print "COND" . join('/', @$list) . "\n";
	my ($a, $rel, $b) = splice(@$list, 0, 3);
	my $loopno = pop @labels;
	push @labels, ++$labelno;
	push @labels, $loopno;
	my $endlop = sprintf "L%05d", $labelno;
	my $cmpflag = 0;
	if($rel =~ /</) {
	    print "\t" if !$haslbl;
	    print "CMP $b $a\n";
	    print "\tJLZ $endlop\n";
	    $haslbl = 0;
	    $cmpflag = 1;
	} 
	if($rel =~ />/) {
	    print "\t" if !$haslbl;
	    print "CMP $a $b\n";
	    print "\tJLZ $endlop\n";
	    $haslbl = 0;
	    $cmpflag = 1;
	}
	if($rel =~ /=/) {
	    if(!$cmpflag) {
		print "\t" if !$haslbl;
		print "CMP $a $b\n";
		print "\tJNZ $endlop\n";
		$haslbl = 0;
	    }
	} elsif($rel !~ /<>/) {
	    print "\t" if(!$haslbl);
	    print "JZE $endlop\n";
	    $haslbl = 0;
	}

        return @$list;
    }

    sub got_hook {
	if($haslbl) {
	    print "NOP\n";
	    $haslbl = 0;
	}
	push @labels, ++$labelno;
	printf "L%05d:\t", $labelno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_elsehook {
	my $lno0 = pop @labels; # unused if label
	my $lno1 = pop @labels; # target of not-cond
	push @labels, ++$labelno;
	push @labels, $lno1;
	printf "\tJMP L%05d\n", $labelno;
	printf "L%05d:\t", $lno1;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_subname {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "SUB: " . join('/', @$list) . "\n";

 	while (@$list > 1) {
	    my ($var, $val) = splice(@$list, 0, 2);
	    print "$var=\tMEM 0\n";
	    printf "L%05s:\t", $var;
	    push @labels, $var;
	    $haslbl = 1;
	}
	
       return @$list;
    }

    sub got_subdecl {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print Dumper(@$list);

	my $sub = pop @labels;
	printf "\tJMP *%s\n", $sub;
	return @$list;
    }

    sub got_subcall {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "CALL: " . join('/', @$list) . "\n";

 	while (@$list > 0) {
	    my ($var) = splice(@$list, 0, 1);
	    print "\t" if !$haslbl;
	    #printf "MOV \$ %s\n", $var;
	    printf "JSR %s L%05s\n", $var, $var;
	    $haslbl = 1;
	}
        return @$list;
    }

    sub got_block {
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }

    sub got_while {
	my $lno = pop @labels;
	print "\t" if !$haslbl;
	printf "JMP L%05d\n", $lno;
	$haslbl = 0;
	
	my $lno = pop @labels;
	printf "L%05d:\t", $lno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "WHILE\n";

        return @$list;
    }

    sub got_if {
	my $lno = pop @labels;
	#print "\t" if !$haslbl;
	#printf "JMP L%05d\n", $lno;
	#$haslbl = 0;
	
	my $lno = pop @labels;
	printf "L%05d:\t", $lno;
	$haslbl = 1;
	
        my ($self, $list) = @_;
        return $list unless ref $list;

	# print "WHILE\n";

        return @$list;
    }

    sub got_addsub {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "COMP: " . join('/', @$list) . "\n";

	while (@$list > 1) {
	    my ($a, $op, $b) = splice(@$list, 0, 3);
	    $a = "#$a" if($a =~ /^\d/);
	    $b = "#$b" if($b =~ /^\d/);
	    print "\t" if !$haslbl;
	    print $opcode{$op} . " $a $b $t\n";
	    $haslbl = 0;
	    unshift @$list, "\@$t"; $t++;
	}
        return @$list;
    }

    sub got_expr {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "EXPR: " . join('/', @$list) . "\n";
	while (@$list > 1) {
	    my ($s, $v) = splice(@$list, 0, 2);
	    if($s eq '-') {
		if($isdecl) {
		    my $cv = ((~($v & $maxnum) + 1) & $maxnum);
		    unshift @$list, $cv;
		} else {
		    print "\t" if !$haslbl;
		    print "COM $v $t\n";
		    $haslbl = 0;
		    unshift @$list, "$t"; $t++;
		}
	    } else {
		unshift @$list, $v;
	    }
	}

        return @$list;
    }

    sub gotrule {
        my ($self, $list) = @_;
        return $list unless ref $list;
	#print "rule: " . join('/', @$list) . "\n";

        return @$list;
    }

    sub final {
	print "HLT\n";
        my ($self, $list) = @_;
        return $list unless ref $list;

        return @$list;
    }	
}

# cmdline options
my ($srcfile, $outfile, $helpme, $dumpstart, $trace, $quiet, $inter);

GetOptions(
    "help|?" => \$helpme,
    "output=s" => \$outfile,
    "quiet" => \$quiet,
    ) or die("FATAL: Cannot understand options.\n");

my ($srcfile, $endguard) = @ARGV;
die "Usage: taccc [ opts ] srcfile\n" 
    if(!defined $srcfile || defined $endguard || defined $helpme);

my $out = *STDOUT;
if(defined $outfile) {
    open($out, '>', $outfile) or die("FATAL: Cannot open $outfile for writing.\n");
}

my $src = read_file($srcfile, chomp => 1);
pegex($grammar, 'TACcc')->parse($src);

1; # EOF
